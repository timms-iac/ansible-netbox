---
    - name: "Include all .yaml and .yml files from {{ netbox_data_dir }}"
      ansible.builtin.include_vars:
        dir: "{{ netbox_data_dir }}-test"
        ignore_unknown_extensions: true
        extensions:
           - 'yaml'
           - 'yml'
      tags:
        - device

    - name: "Some vars from {{ netbox_data_dir }}"
      ansible.builtin.debug:
        var: query("netbox.netbox.nb_lookup", "vlans", api_endpoint=ansible_nb_url,token=netbox_ansible_token)
      tags:
        - device


    - name: Aggregate Variables
      ansible.builtin.set_fact: 
        netbox_data: | 
          {% set data = {} %}
          {% for item in netbox_data_models %}
          {% set output = [] %}
          {% for agg in item.aggregation %}
          {% set tmp = lookup('vars', item.var_prefix + agg, default='NEW') %}
          {% if tmp != "NEW" %}
          {% set _ = output.append(tmp) %}
          {% endif %}
          {% endfor %}{# agg #}
          {% set _ = data.update({ item.data: output | flatten() }) %}
          {% endfor %}{# item #}
          {{ data }}
        netbox_lookup: |
          {% set data = {} %}
          {% for item in netbox_data_models %}
          {% set output = {} %}
          {% for qr in query("netbox.netbox.nb_lookup", item.lookup, api_endpoint=ansible_nb_url,token=netbox_ansible_token) %}
          {# ### The primary_key can be composed of different keys, separated with - ### #}
          {% set pks = item.primary_key.split("-") %}
          {% set tmp = [] %}
          {% for pk in pks %}
          {# ### The primary_key (or a component may be a dict in . notation ### #}
          {% set spk = pk.split(".") %}
          {% if spk | length > 2 and spk[1] == "list" %}
          {% elif spk | length > 2 %}
          {% if spk | length > 3 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined and qr.value[spk[0]][spk[1]][spk[2]] is defined and qr.value[spk[0]][spk[1]][spk[2]][spk[3]] is defined%}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]][spk[2]][spk[3]] ) %}
          {% elif spk | length > 2 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined and qr.value[spk[0]][spk[1]][spk[2]] is defined %}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]][spk[2]]) %}
          {% endif %}
          {% elif spk | length > 1 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined %}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]]) %}
          {% elif qr.value[pk] is defined %}
          {% set _ = tmp.append(qr.value[pk]) %}
          {% endif %}{# spk #}
          {% endfor %}{# pk #}
          {% set primary_key = tmp | join(" ") %}
          {% if output[primary_key] is not defined %}
          {% set _ = output.update({ primary_key: {} }) %}
          {# ### One or more parameters may be required ### #}
          {% for rp in item.req_param %}
          {% if item.req_param[rp] is mapping %}
          {% for rpm in item.req_param[rp] %}
          {% set params = item.req_param[rp][rpm].split(".") %}
          {% if output[primary_key][rp] is undefined %}
          {% set _ = output[primary_key].update( { rp: {} } ) %}
          {% endif %}{# output #}
          {% if params | length > 1 and params[1] != "list" %}{# if params | length > 1 #}
          {% set _ = output[primary_key][rp].update( { rpm: qr.value[params[0]][params[1]] } ) %}
          {% endif %}{# if params | length > 1 #}
          {% endfor %}{# rpm #}
          {% else %}{# mapping #}
          {% set srp = item.req_param[rp].split(".") %}
          {% if srp | length > 2 and srp[1] == "list" %}
          {% elif srp | length > 2 %}
          {% if srp | length > 3 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined and qr.value[srp[0]][srp[1]][srp[2]] is defined  and qr.value[srp[0]][srp[1]][srp[2]][srp[3]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]][srp[2]][srp[3]] } ) %}
          {% endif %}
          {% elif srp | length > 2 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined and qr.value[srp[0]][srp[1]][srp[2]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]][srp[2]] } ) %}
          {% endif %}
          {% endif %}
          {% elif srp | length > 1 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]] } ) %}
          {% endif %}
          {% else %}{# srp #}
          {% set _ = output[primary_key].update( { rp: qr.value[item.req_param[rp]] } ) %}
          {% endif %}{# srp #}
          {% endif %}{# mapping #}
          {% endfor %}{# rp #}
          {# ### Optional Parameters ### #}
          {% for op in item.opt_param %}
          {% if item.opt_param[op] is mapping %}
          {% for opm in item.opt_param[op] %}
          {% set params = item.opt_param[op][opm].split(".") %}
          {% if qr.value[params[0]] is defined and qr.value[params[0]] is not none and qr.value[params[0]][params[1]] is defined%}
          {% if output[primary_key][op] is undefined %}
          {% set _ = output[primary_key].update( { op: {} } ) %}
          {% endif %}
          {% if params | length > 2 %}
          {% set _ = output[primary_key][op].update( { opm: qr.value[params[0]][params[1]][params[2]] } ) %}
          {% else %}{# if params | length > 2 #}
          {% set _ = output[primary_key][op].update( { opm: qr.value[params[0]][params[1]] } ) %}
          {% if op == "untagged_vlan" %}
          {% set _ = output[primary_key][op].update( { "site": netbox_default_site } ) %}
          {% endif %}{# if op == "untagged_vlan"#}
          {% endif %}{# if params | length > 2 #}
          {% endif %}{# if qr.value[params[0]] is defined #}
          {% endfor %}{# opm #}
          {% else %}{# mapping #}
          {% set params = item.opt_param[op].split(".") %}
          {% if qr.value[params[0]] is defined and qr.value[params[0]] is not none %}
          {% if params | length > 1 and params[1] == "list" and qr.value[params[0]] is defined and qr.value[params[0]] is iterable and qr.value[params[0]]| length > 0 %}
          {% set tmp = [] %}
          {% for i in qr.value[params[0]] %}
          {% set _ = tmp.append({ params[2]: i[params[2]], "site": netbox_default_site }) %}
          {% endfor %}{# i #}
          {% set _ = output[primary_key].update({ op: tmp | sort(attribute=params[2])}) %}
          {% elif params | length > 1 and op == "untagged_vlan" %}
          {% set _ = output[primary_key].update( { op: { param[1]: qr.value[params[0]][params[1]], "site": netbox_default_site} } ) %}
          {% elif params | length > 1 and params[1] != "list" %}
          {% set _ = output[primary_key].update( { op: qr.value[params[0]][params[1]] } ) %}
          {% elif params | length == 1 %}{# params #}
          {% set _ = output[primary_key].update( { op: qr.value[params[0]] } ) %}
          {% endif %}{# params #}
          {% endif %}{# if qr.value[params[0]] is defined #}
          {% endif %}{# mapping #}
          {% endfor %}{# op #}
          {% endif %}{# if output[primary_key] is not defined #}
          {% endfor %}{# qr #}
          {% set _ = data.update({ item.data: output }) %}
          {% endfor %}{# item #}
          {{ data }}
      tags:
        - device


    - name: "Some vars from {{ netbox_data_dir }}"
      ansible.builtin.debug:
        var: netbox_data
      tags:
        - device

    - name: "Some lookup vars"
      ansible.builtin.debug:
        var: netbox_lookup
      tags:
        - device

    - name: Build netbox data hash
      ansible.builtin.set_fact:
        netbox_data_hash: |
          {% set odata = {} %}
          {% for item in netbox_data_models %}
          {% set output = {} %}
          {% for data in netbox_data[item.data] %}
          {% if data["slug"] is undefined and item.opt_param["slug"] is defined %}
          {% set _ = data.update({ "slug": data[item.primary_key] | split(" ") | join("") | split(".") | join("-") | lower }) %}
          {% endif %}
          {% if data.tagged_vlans is defined %}
          {% set tmp = data.tagged_vlans | sort(attribute="name") %}
          {% set _ = data.update({ "tagged_vlans": tmp }) %}
          {% endif %}
          {% if data.primary_mac_address is defined %}
          {% set _ = data.update({ "mac_address": data.primary_mac_address }) %}
          {% endif %}
          {% if data.untagged_vlan is defined and data.untagged_vlan is not mapping %}
          {% set _ = data.update({ "untagged_vlan": { "name": data.untagged_vlan, "site": netbox_default_site }}) %}
          {% endif %}
          {% for dp in item.default_param %}
          {% if data[dp] is undefined %}
          {% set _ = data.update({ dp: item.default_param[dp] }) %}
          {% elif data[dp] is mapping %}
          {% for dpp in item.default_param[dp] %}
          {% if data[dp][dpp] is undefined %}
          {% set _ = data[dp].update({ dpp: item.default_param[dp][dpp] }) %}
          {% endif %}
          {% endfor %}{# dpp #}
          {% endif %}
          {% endfor %}{# dp #}
          {% set pks = item.primary_key.split("-") %}
          {% set tmp = [] %}
          {% for pk in pks %}
          {% set spk = pk.split(".") %}
          {% if spk | length > 1 %}
          {% if data[spk[0]] is mapping %}
          {% set _ = tmp.append(data[spk[0]][spk[1]]) %}
          {% else %}
          {% set _ = tmp.append(data[spk[0]]) %}
          {% endif %}
          {% else %}
          {% set _ = tmp.append(data[pk]) %}
          {% endif %}
          {% endfor %}{# pk #}
          {% if item.suppress_if_undefined is defined %}
          {% for sui in item.suppress_if_undefined %}
          {% if data[sui] is defined %}
          {% for suii in item.suppress_if_undefined[sui] %}
          {% if netbox_lookup[item.suppress_if_undefined[sui][suii]][data[sui][suii]] is undefined %}
          {% set _ = data.pop(sui) %}
          {% endif %}
          {% endfor %}{# suii #}
          {% endif %}
          {% endfor %}{# sui #}
          {% endif %}
          {% set primary_key = tmp | join(" ") %}
          {% if item.filter is defined %}
          {% for flt in item.filter %}
          {% if data[flt] is defined %}
          {% set _ = data.update({ flt: data[flt] | map(item.filter[flt]) | join }) %}
          {% endif %}
          {% endfor %}{# flt #}
          {% endif %}
          {% set _ = output.update({ primary_key: data }) %}
          {% endfor %}{# data #}
          {% set _ = odata.update({ item.data: output }) %}
          {% endfor %}{# item #}
          {{ odata }}
      tags:
        - device

    - name: "Some lookup vars"
      ansible.builtin.debug:
        var: query("netbox.netbox.nb_lookup", "device-roles", api_endpoint=ansible_nb_url,token=netbox_ansible_token)
      tags:
        - device

    - name: "netbox data hash"
      ansible.builtin.debug:
        var: netbox_data_hash
      tags:
        - device

    - name: Show the difference
      ansible.utils.fact_diff:
        before: "{{ netbox_lookup[item.key][item.value] }}"
        after: "{{ netbox_data_hash[item.key][item.value] }}"
      loop: |
        {% set output = [] %}
        {% for dm in netbox_data_models %}
        {% for pk in netbox_data_hash[dm.data] %}
        {% if netbox_lookup[dm.data][pk] is defined %}
        {% set _ = output.append({ "key": dm.data, "value":  pk  }) %}
        {% endif %}
        {% endfor %}
        {% endfor %}
        {{ output }}
      register: netbox_diff
      tags:
        - device

    - name: "Generate netbox diff"
      ansible.builtin.set_fact:
        netbox_diff: |
          {% set output = [] %}
          {% for nbd in netbox_diff.results %}
          {% if nbd.diff_text != "" %}
          {% set _ = output.append({ "item": nbd.item, "diff_lines": nbd.diff_lines}) %}
          {% endif %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "Show netbox diff"
      ansible.builtin.debug:
        var: netbox_diff
      tags:
        - device

    - name: Generate list of new items
      ansible.builtin.set_fact:
        netbox_new_items: |
          {% set output = [] %}
          {% for dm in netbox_data_models %}
          {% for pk in netbox_data_hash[dm.data] %}
          {% if netbox_lookup[dm.data][pk] is undefined %}
          {% set _ = output.append({ "key": dm.data, "value":  pk  }) %}
          {% endif %}
          {% endfor %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "Show list of new items"
      ansible.builtin.debug:
        var: netbox_new_items
      tags:
        - device

    - name: "Write tasks file"
      ansible.builtin.template:
        src: taskfile.yml.j2
        dest: /tmp/taskfile.yml
      tags:
        - device


    - name: "Run tasks"
      ansible.builtin.include_tasks:
        file: /tmp/taskfile.yml
        apply:
          tags:
            - device
      tags:
        - never
        - device

