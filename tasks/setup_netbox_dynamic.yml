---
#    - name: "Include all .yaml and .yml files from {{ netbox_data_dir }}"
#      ansible.builtin.include_vars:
#        dir: "{{ netbox_data_dir }}"
#        ignore_unknown_extensions: true
#        extensions:
#           - 'yaml'
#           - 'yml'
#      tags:
#        - device
#
    - name: "Some vars from {{ netbox_data_dir }}"
      ansible.builtin.debug:
        #        msg: ""
        #        var: query("netbox.netbox.nb_lookup", "cables", api_endpoint=ansible_nb_url,token=netbox_ansible_token)
        var: query("netbox.netbox.nb_lookup", "interfaces", api_filter="name=MGI2 device=sodola01", api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",")
      tags:
        - device

    - name: "Token for DNS Nameservers"
      ansible.builtin.set_fact:
        netbox_token: 'Token {{netbox_ansible_token}}'
      tags:
        - device

    - name: "Get token DNS Nameservers"
      ansible.builtin.debug: 
        var: netbox_token
      tags:
        - device

    - name: Aggregate Variables
      ansible.builtin.set_fact: 
        netbox_data_raw: | 
          {% set data = {} %}
          {% for item in netbox_data_models %}
          {% set output = [] %}
          {% for agg in item.aggregation %}
          {% set tmp = lookup('vars', item.var_prefix + agg, default='NEW') %}
          {% if tmp != "NEW" %}
          {% set _ = output.append(tmp) %}
          {% endif %}
          {% endfor %}{# agg #}
          {% set _ = data.update({ item.data: output | flatten() }) %}
          {% endfor %}{# item #}
          {{ data }}
        netbox_lookup: |
          {% set data = {} %}
          {% for item in netbox_data_models %}
          {% set output = {} %}
          {% set query_results = [] %}
          {% if item.lookup is defined %}
          {% set query_results = query("netbox.netbox.nb_lookup", item.lookup, api_endpoint=ansible_nb_url,token=netbox_ansible_token) %}
          {% else %}
          {% set tmp_q = [] %}
          {% set tmp_q = query('ansible.builtin.url', ansible_nb_url + item.rest_path + "?limit=1000", headers={'Authorization':netbox_token })[0] | from_json %}
          {% for tq in tmp_q.results %}
          {% if tq.name is undefined or tq.name != "@" %}
          {% set _ = query_results.append({ 'value': tq }) %}
          {% endif %}
          {% endfor %}
          {% endif %}
          {% for qr in query_results %}
          {% if qr is mapping and qr.value is defined %}
          {# ### The primary_key can be composed of different keys, separated with - ### #}
          {% set pks = item.primary_key.split("-") %}
          {% set tmp = [] %}
          {% for pk in pks %}
          {# ### The primary_key (or a component may be a dict in . notation ### #}
          {% set spk = pk.split(".") %}
          {% if spk | length > 2 and spk[1] == "list" %}
          {% elif spk | length > 2 %}
          {% if spk | length > 3 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined and qr.value[spk[0]][spk[1]][spk[2]] is defined and qr.value[spk[0]][spk[1]][spk[2]][spk[3]] is defined%}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]][spk[2]][spk[3]] ) %}
          {% elif spk | length > 2 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined and qr.value[spk[0]][spk[1]][spk[2]] is defined %}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]][spk[2]]) %}
          {% endif %}
          {% elif spk | length > 1 and qr.value[spk[0]] is defined and qr.value[spk[0]][spk[1]] is defined %}
          {% set _ = tmp.append(qr.value[spk[0]][spk[1]]) %}
          {% elif qr.value[pk] is defined %}
          {% set _ = tmp.append(qr.value[pk]) %}
          {% endif %}{# spk #}
          {% endfor %}{# pk #}
          {% set primary_key = tmp | join(" ") %}
          {% if output[primary_key] is not defined %}
          {% set _ = output.update({ primary_key: {} }) %}
          {% endif %}{# if output[primary_key] is not defined #}
          {# ### One or more parameters may be required ### #}
          {% if item.req_param is defined %}
          {% for rp in item.req_param %}
          {% if item.req_param[rp] is mapping %}
          {% for rpm in item.req_param[rp] %}
          {% set params = item.req_param[rp][rpm].split(".") %}
          {% if output[primary_key][rp] is undefined %}
          {% set _ = output[primary_key].update( { rp: {} } ) %}
          {% endif %}{# output #}
          {% if params | length > 1 and params[1] != "list" and qr.value[params[0]] is mapping %}{# if params | length > 1 #}
          {% set _ = output[primary_key][rp].update( { rpm: qr.value[params[0]][params[1]] } ) %}
          {% endif %}{# if params | length > 1 #}
          {% endfor %}{# rpm #}
          {% else %}{# mapping #}
          {% set srp = item.req_param[rp].split(".") %}
          {% if srp | length > 2 and srp[1] == "list" %}
          {% elif srp | length > 2 %}
          {% if srp | length > 3 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined and qr.value[srp[0]][srp[1]][srp[2]] is defined  and qr.value[srp[0]][srp[1]][srp[2]][srp[3]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]][srp[2]][srp[3]] } ) %}
          {% endif %}
          {% elif srp | length > 2 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined and qr.value[srp[0]][srp[1]][srp[2]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]][srp[2]] } ) %}
          {% endif %}
          {% endif %}
          {% elif srp | length > 1 %}
          {% if qr.value[srp[0]] is defined and qr.value[srp[0]][srp[1]] is defined %}
          {% set _ = output[primary_key].update( { rp: qr.value[srp[0]][srp[1]] } ) %}
          {% endif %}
          {% else %}{# srp #}
          {% set _ = output[primary_key].update( { rp: qr.value[item.req_param[rp]] } ) %}
          {% endif %}{# srp #}
          {% endif %}{# mapping #}
          {% endfor %}{# rp #}
          {% endif %}{# item.req_param #}
          {# ### Optional Parameters ### #}
          {% for op in item.opt_param %}
          {% if item.opt_param[op] is mapping %}
          {% for opm in item.opt_param[op] %}
          {% set params = item.opt_param[op][opm].split(".") %}
          {% if qr.value[params[0]] is defined and qr.value[params[0]] is not none and qr.value[params[0]][params[1]] is defined%}
          {% if output[primary_key][op] is undefined %}
          {% set _ = output[primary_key].update( { op: {} } ) %}
          {% endif %}
          {% if params | length > 2 %}
          {% set _ = output[primary_key][op].update( { opm: qr.value[params[0]][params[1]][params[2]] } ) %}
          {% else %}{# if params | length > 2 #}
          {% set _ = output[primary_key][op].update( { opm: qr.value[params[0]][params[1]] } ) %}
          {% if op == "untagged_vlan" %}
          {% set _ = output[primary_key][op].update( { "site": netbox_default_site } ) %}
          {% elif op == "vlan" %}
          {% set _ = output[primary_key][op].update( { "site": netbox_default_site } ) %}
          {% endif %}{# if op == "untagged_vlan"#}
          {% endif %}{# if params | length > 2 #}
          {% endif %}{# if qr.value[params[0]] is defined #}
          {% endfor %}{# opm #}
          {% elif item.opt_param[op] is string %}{# mapping #}
          {% set params = item.opt_param[op].split(".") %}
          {% if qr.value[params[0]] is defined and qr.value[params[0]] is not none %}
          {% if params | length > 1 and params[1] == "list" and qr.value[params[0]] is defined and qr.value[params[0]] is iterable and qr.value[params[0]] | length > 0 %}
          {% set tmp = [] %}
          {% for i in qr.value[params[0]] %}
          {% if params[2] == "id" %}
          {% set _ = tmp.append(i[params[2]]) %}
          {% elif params[0] == "nameservers" or params[0] == "zones" or item.data == "static_routes" %}
          {% set _ = tmp.append({ params[2]: i[params[2]] }) %}
          {% else %}
          {% set _ = tmp.append({ params[2]: i[params[2]], "site": netbox_default_site }) %}
          {% endif %}
          {% endfor %}{# i #}
          {% set _ = output[primary_key].update({ op: tmp | sort(attribute=params[2])}) %}
          {% elif params | length > 1 and op == "untagged_vlan" %}
          {% set _ = output[primary_key].update( { op: { param[1]: qr.value[params[0]][params[1]], "site": netbox_default_site} } ) %}
          {% elif params | length > 1 and params[1] != "list" %}
          {% set _ = output[primary_key].update( { op: qr.value[params[0]][params[1]] } ) %}
          {% elif params | length == 1 %}{# params #}
          {% set _ = output[primary_key].update( { op: qr.value[params[0]] } ) %}
          {% endif %}{# params #}
          {% endif %}{# if qr.value[params[0]] is defined #}
          {% else %}{# mapping - list for cables#}
          {% if output[primary_key][op] is undefined %}
          {% set _ = output[primary_key].update( { op: [] } ) %}
          {% endif %}
          {% for opl in qr.value[op] %}
          {% if opl.object_id is defined and opl.object_type is defined %}
          {% set _ = output[primary_key][op].append( { "object_id": opl.object_id, "object_type": opl.object_type } ) %}
          {% endif %}
          {% endfor %}{# opl #}
          {% endif %}{# mapping #}
          {% endfor %}{# op #}
          {# ############# #}
          {% endif %}
          {% endfor %}{# qr #}
          {% set _ = data.update({ item.data: output }) %}
          {% endfor %}{# item #}
          {{ data }}
      tags:
        - device

    - name: Build type lookup hash
      ansible.builtin.set_fact:
        netbox_type_lookup: |
          {% set output = {} %}
          {% for model in netbox_data_models %}
          {% if model.type is string and model.lookup is defined %}
          {% set _ = output.update({model.type: model.lookup}) %}
          {% endif %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "RAW data from {{ netbox_data_dir }}"
      ansible.builtin.debug:
        var: netbox_data_raw
      tags:
        - device

    - name: Build netbox data
      ansible.builtin.set_fact:
        netbox_data: |
          {% set output = {} %}
          {% for out in netbox_data_raw.keys() %}
          {# ### input filters ### #}
          {% set _ = output.update({ out: [] }) %}
          {% if out == "cables" %}
          {% for cable in netbox_data_raw[out] %}
          {% if cable.length is defined %}
          {% set _ = cable.update({"length": cable.length | float()}) %}
          {% endif %}
          {% if cable.color is defined %}
          {% set _ = cable.update({"color": cable.color | lower()}) %}
          {% endif %}
          {% if cable.termination_a is defined and cable.termination_b is defined and cable.label is undefined %}
          {% set _ = cable.update({"label": cable.termination_a.device + "/" + cable.termination_a.name + " - " + cable.termination_b.device + "/" + cable.termination_b.name}) %}
          {% endif %}
          {% if cable.termination_a is defined and cable.termination_a_type is defined and cable.termination_a.name is defined and cable.termination_a.device is defined %}
          {% set tmp = query("netbox.netbox.nb_lookup", netbox_type_lookup[cable.termination_a_type], api_filter="name=\'" + cable.termination_a.name + "\' device=" + cable.termination_a.device, api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",") %}
          {% set _ = cable.update({"a_terminations": [{"object_type": cable.termination_a_type, "object_id": tmp | int }]}) %}
          {% if tmp | int != 0 %}
          {% set _ = cable.pop("termination_a") %}
          {% set _ = cable.pop("termination_a_type") %}
          {% endif %}
          {% endif %}
          {% if cable.termination_b is defined and cable.termination_b_type is defined and cable.termination_b.name is defined and cable.termination_b.device is defined %}
          {% set tmp = query("netbox.netbox.nb_lookup", netbox_type_lookup[cable.termination_b_type], api_filter="name=\'" + cable.termination_b.name + "\' device=" + cable.termination_b.device, api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",") %}
          {% set _ = cable.update({"b_terminations": [{"object_type": cable.termination_b_type, "object_id": tmp | int }]}) %}
          {% if tmp | int != 0 %}
          {% set _ = cable.pop("termination_b") %}
          {% set _ = cable.pop("termination_b_type") %}
          {% endif %}
          {% endif %}
          {% set _ = output[out].append(cable) %}
          {% endfor %}
          {# #### fhrp_group_assignment #### #}
          {% elif out == "fhrp_group_assignments" and netbox_data_raw[out] is defined %}
          {% for fga in netbox_data_raw[out] %}
          {% set _ = fga.update({"group": {"group_id": fga.fhrp_group }}) %}
          {% if fga.interface_type is defined and fga.interface_type == "virtualization.vminterface" %}
          {% set _ = fga["interface"].update({ "virtual_machine": { "name": fga.interface.virtual_machine }, "name": fga.interface.name }) %}
          {% else %}
          {% set _ = fga["interface"].update({ "device": { "name": fga.interface.device }, "name": fga.interface.name }) %}
          {% endif %}
          {% if fga.fhrp_group is defined %}
          {% set tmp = query("netbox.netbox.nb_lookup", "fhrp-groups", api_filter="group_id=" + fga.fhrp_group | string, api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",") %}
          {% set _ = fga.update({"fhrp_group": tmp | int }) %}
          {% set _ = fga["group"].update({"id": tmp | int }) %}
          {% endif %}
          {% if fga.interface_type is defined and fga.interface_type == "virtualization.vminterface" %}
          {% if fga.interface.name is defined and fga.interface.virtual_machine.name is defined %}
          {% set tmp = query("netbox.netbox.nb_lookup", netbox_type_lookup[fga.interface_type], api_filter="name=" + fga.interface.name + " virtual_machine=" + fga.interface.virtual_machine.name, api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",") %}
          {% set _ = fga.update({"interface_id": tmp | int }) %}
          {% set _ = fga["interface"].update({"id": tmp | int }) %}
          {% endif %}
          {% else %}
          {% if fga.interface.name is defined and fga.interface.device.name is defined %}
          {% set tmp = query("netbox.netbox.nb_lookup", netbox_type_lookup[fga.interface_type], api_filter="name=" + fga.interface.name + " device=" + fga.interface.virtual_machine.name, api_endpoint=ansible_nb_url, token=netbox_ansible_token) | map(attribute="key") | join(",") %}
          {% set _ = fga.update({"interface_id": tmp | int }) %}
          {% set _ = fga["interface"].update({"id": tmp | int }) %}
          {% endif %}
          {% endif %}
          {# set _ = fga.pop("interface") #}
          {% set _ = output[out].append(fga) %}
          {% endfor %}
          {# ### device_interfaces ### #}
          {% elif out == "device_interfaces" and netbox_data_raw[out] is defined %}
          {% for di in netbox_data_raw[out] %}
          {% if di.mode is defined %}
          {% set _ = di.update({"mode": di.mode | lower }) %}
          {% endif %}
          {% if di.mac_address is defined %}
          {% set _ = di.update({"mac_address": di.mac_address | upper }) %}
          {% set _ = di.update({"primary_mac_address": di.mac_address | upper }) %}
          {% endif %}
          {% if di.primary_mac_address is defined %}
          {% set _ = di.update({"mac_address": di.primary_mac_address | upper }) %}
          {% set _ = di.update({"primary_mac_address": di.primary_mac_address | upper }) %}
          {% endif %}
          {% if "ase-" in di.type %}{# 1000Base-T #}
          {% set _ = di.update({"type": di.type | upper }) %}
          {% endif %}
          {% set _ = output[out].append(di) %}
          {% endfor %}{# di #}
          {% else %}{# out #}
          {% set _ = output.update({ out: netbox_data_raw[out] }) %}
          {% endif %}{# out #}
          {# ##################### #}
          {% endfor %}{# out #}
          {{ output }}
      tags:
        - device

    - name: "Some vars from {{ netbox_data_dir }}"
      ansible.builtin.debug:
        var: netbox_data
      tags:
        - device

    - name: "Some lookup vars"
      ansible.builtin.debug:
        var: netbox_lookup
      tags:
        - device

    - name: Build netbox data hash
      ansible.builtin.set_fact:
        netbox_data_hash: |
          {% set odata = {} %}
          {% for item in netbox_data_models %}
          {% set output = {} %}
          {# ### Autogenerate DNS Records ### #}
          {% if item.data == "dns_records" %}
          {% for ip in netbox_lookup.ip_addresses %}
          {% if netbox_lookup.ip_addresses[ip].dns_name is defined and netbox_lookup.ip_addresses[ip].dns_name != "" %}
          {% set dns = netbox_lookup.ip_addresses[ip].dns_name | split('.',1) %}
          {% set _ = output.update({ dns | first : {} }) %}
          {% set _ = output[dns | first].update({'name': dns | first, 'value': netbox_lookup.ip_addresses[ip].address | split('/',1) | first, 'zone': { 'name': dns | last } }) %}
          {% for dp in item.default_param %}
          {% if output[dns | first][dp] is undefined %}
          {% set _ = output[dns | first].update({dp: item.default_param[dp] }) %}
          {% endif %}
          {% endfor %}
          {% if output[dns | first].id is undefined and netbox_lookup[item.data][dns | first].id is defined %}
          {% set _ = output[dns | first].update({'id': netbox_lookup[item.data][dns | first].id }) %}
          {% endif %}
          {% endif %}
          {% endfor %}
          {% endif %}
          {# ### Process normal data ### #}
          {% for data in netbox_data[item.data] %}
          {% if data["slug"] is undefined and item.opt_param["slug"] is defined %}
          {% set _ = data.update({ "slug": data[item.primary_key] | split(" ") | join("") | split(".") | join("-") | lower }) %}
          {% endif %}
          {% if data.tagged_vlans is defined %}
          {% set tmp = data.tagged_vlans | sort(attribute="name") %}
          {% set _ = data.update({ "tagged_vlans": tmp }) %}
          {% for tv in data.tagged_vlans %}
          {% set _ = tv.update({ "site": netbox_default_site }) %}
          {% endfor %}
          {% endif %}
          {% if data.primary_mac_address is defined %}
          {% set _ = data.update({ "mac_address": data.primary_mac_address }) %}
          {% endif %}
          {% if data.untagged_vlan is defined and data.untagged_vlan is not mapping %}
          {% set _ = data.update({ "untagged_vlan": { "name": data.untagged_vlan, "site": netbox_default_site }}) %}
          {% endif %}
          {# ### Default parameter ### #}
          {% if item.default_param is defined %}
          {% for dp in item.default_param %}
          {% if data[dp] is undefined %}
          {% set _ = data.update({ dp: item.default_param[dp] }) %}
          {% elif data[dp] is mapping %}
          {% for dpp in item.default_param[dp] %}
          {% if data[dp][dpp] is undefined %}
          {% set _ = data[dp].update({ dpp: item.default_param[dp][dpp] }) %}
          {% endif %}
          {% endfor %}{# dpp #}
          {% endif %}
          {% endfor %}{# dp #}
          {% endif %}
          {# ### Determine primary_key ### #}
          {% set pks = item.primary_key.split("-") %}
          {% set tmp = [] %}
          {% for pk in pks %}
          {% set spk = pk.split(".") %}
          {% if spk | length > 2 %}
          {% if data[spk[0]] is mapping and data[spk[0]][spk[1]] is mapping %}
          {% set _ = tmp.append(data[spk[0]][spk[1]][spk[2]]) %}
          {% endif %}
          {% elif spk | length > 1 %}
          {% if data[spk[0]] is mapping %}
          {% set _ = tmp.append(data[spk[0]][spk[1]]) %}
          {% else %}
          {% set _ = tmp.append(data[spk[0]]) %}
          {% endif %}
          {% else %}
          {% set _ = tmp.append(data[pk]) %}
          {% endif %}
          {% endfor %}{# pk #}
          {% set primary_key = tmp | join(" ") %}
          {% if item.opt_param.id is defined and data.id is undefined and netbox_lookup[item.data][primary_key].id is defined %}
          {% set _ = data.update({ "id": netbox_lookup[item.data][primary_key].id }) %}
          {% endif %}
          {% if item.opt_param.zones is defined and data.zones is undefined and netbox_lookup[item.data][primary_key].zones is defined %}
          {% set _ = data.update({ "zones": netbox_lookup[item.data][primary_key].zones }) %}
          {% endif %}
          {% if item.data == "fhrp_group_assignments" %}
          {% set _ = data.pop("group") %}
          {% set _ = data.pop("interface") %}
          {% endif %}
          {% set _ = output.update({ primary_key: data }) %}
          {% endfor %}{# data #}
          {% set _ = odata.update({ item.data: output }) %}
          {% endfor %}{# item #}
          {{ odata }}
      tags:
        - device

    - name: "Some lookup vars"
      ansible.builtin.debug:
        var: query("netbox.netbox.nb_lookup", "device-roles", api_endpoint=ansible_nb_url,token=netbox_ansible_token)
      tags:
        - device

    - name: "netbox data hash"
      ansible.builtin.debug:
        var: netbox_data_hash
      tags:
        - device

    - name: Show the difference
      ansible.utils.fact_diff:
        before: "{{ netbox_lookup[item.key][item.value] }}"
        after: "{{ netbox_data_hash[item.key][item.value] }}"
      loop: |
        {% set output = [] %}
        {% for dm in netbox_data_models %}
        {% for pk in netbox_data_hash[dm.data] %}
        {% if netbox_lookup[dm.data][pk] is defined %}
        {% set _ = output.append({ "key": dm.data, "value":  pk  }) %}
        {% endif %}
        {% endfor %}
        {% endfor %}
        {{ output }}
        #      no_log: true
      register: netbox_diff
      tags:
        - device

    - name: "Generate netbox diff"
      ansible.builtin.set_fact:
        netbox_diff: |
          {% set output = [] %}
          {% for nbd in netbox_diff.results %}
          {% if nbd.diff_text != "" %}
          {% set _ = output.append({ "item": nbd.item, "diff_lines": nbd.diff_lines}) %}
          {% endif %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "Show netbox diff"
      ansible.builtin.debug:
        var: netbox_diff
      tags:
        - device

    - name: Generate list of new items
      ansible.builtin.set_fact:
        netbox_new_items: |
          {% set output = [] %}
          {% for dm in netbox_data_models %}
          {% for pk in netbox_data_hash[dm.data] %}
          {% if netbox_lookup[dm.data][pk] is undefined %}
          {% set _ = output.append({ "key": dm.data, "value":  pk  }) %}
          {% endif %}
          {% endfor %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "Show list of new items"
      ansible.builtin.debug:
        var: netbox_new_items
      tags:
        - device

    - name: Last fixes to netbox_data_hash
      ansible.builtin.set_fact:
        netbox_data_hash: |
          {% set output = netbox_data_hash %}
          {% for nni in netbox_new_items %}
          {% if nni.key == "devices" and netbox_data_hash[nni.key][nni.value].primary_ip4 is defined %}
          {% set _ = output[nni.key][nni.value].pop('primary_ip4') %}
          {% endif %}
          {% if nni.key == "device_interfaces" and netbox_data_hash[nni.key][nni.value].primary_mac_address is defined %}
          {% set _ = output[nni.key][nni.value].pop('primary_mac_address') %}
          {% endif %}
          {% endfor %}
          {{ output }}
      tags:
        - device

    - name: "Show netbox_data_hash"
      ansible.builtin.debug:
        var: netbox_data_hash
      tags:
        - device

    - name: "Write tasks file"
      ansible.builtin.template:
        src: taskfile.yml.j2
        dest: /tmp/netbox_taskfile.yml
        mode: 0600
      tags:
        - device


    - name: "Run tasks"
      ansible.builtin.include_tasks:
        file: /tmp/netbox_taskfile.yml
        apply:
          tags:
            - device
      tags:
        - never
        - device

